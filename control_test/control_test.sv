
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module control_test (

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================
  assign LEDR[9:0] = SW[9:0];

  display_number_to_hex h0 (.hex(HEX0), .number(SW[3:0]));
  display_number_to_hex h1 (.hex(HEX1), .number(SW[7:4]));
  display_number_to_hex h2 (.hex(HEX2), .number({2'b00, SW[9:8]}));
  assign HEX3 = 8'hff;
  assign HEX4 = 8'hff;
  assign HEX5 = 8'hff;
endmodule

module display_number_to_hex (
  output [7:0] hex,
  input [3:0] number
);
  always_comb begin
    case (number)
      4'h0: hex = 8'b11000000;
      4'h1: hex = 8'b11111001;
      4'h2: hex = 8'b10100100;
      4'h3: hex = 8'b10110000;
      4'h4: hex = 8'b10011001;
      4'h5: hex = 8'b10010010;
      4'h6: hex = 8'b10000010;
      4'h7: hex = 8'b11111000;
      4'h8: hex = 8'b10000000;
      4'h9: hex = 8'b10010000;
      4'ha: hex = 8'b10001000;
      4'hb: hex = 8'b10000011;
      4'hc: hex = 8'b11000110;
      4'hd: hex = 8'b10100001;
      4'he: hex = 8'b10000110;
      4'hf: hex = 8'b10001110;
    endcase
  end
endmodule
